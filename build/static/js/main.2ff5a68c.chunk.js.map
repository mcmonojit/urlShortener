{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","longUrl","setLongUrl","shortUrl","setShortUrl","isCopied","setIsCopied","className","type","name","id","placeholder","required","onChange","event","target","value","onClick","axios","post","userInput","then","response","data","catch","error","console","log","readOnly","text","onCopy","setTimeout","Provider","color","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAkFeA,MA3Ef,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAkCA,OACE,sBAAKC,UAAU,MAAf,UAEE,sBAAKA,UAAU,YAAf,UACE,uBAAOC,KAAK,MAAMC,KAAK,UAAUC,GAAG,UAAUC,YAAY,wBAAwBC,UAAQ,EAC1FC,SAAU,SAACC,GACTZ,EAAWY,EAAMC,OAAOC,UAE1B,wBAAQR,KAAK,SAASS,QA1B5B,WAEEC,IAAMC,KAdO,iDAeb,CACEC,UAAWnB,IAEZoB,MAAK,SAAUC,GAGdlB,EAAYkB,EAASC,SAEtBC,OAAM,SAAUC,GACfC,QAAQC,IAAI,wBAA0BF,OAcpC,iCAIF,sBAAKlB,UAAU,mBAAf,UACE,0BAAUA,UAAU,WAAWqB,UAAU,EAAMZ,MAAOb,IAEtD,cAAC,kBAAD,CAAiB0B,KAAM1B,EAAU2B,OAxCvC,WACExB,GAAY,GACZyB,YAAW,WACTzB,GAAY,KACX,MAoCC,SACE,qBAAKC,UAAU,YAAf,SAGE,sBAAKA,UAAU,gBAAf,UACA,cAAC,IAAYyB,SAAb,CAAsBhB,MAAO,CAAEiB,MAAO,QAASC,KAAM,QAArD,SACA,cAAE,IAAF,MAGA,sBAAM3B,UAAU,gBAAhB,SACCF,EAAW,SAAM,mBC1Df8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2ff5a68c.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { IconContext } from \"react-icons\";\nimport { BiClipboard } from \"react-icons/bi\";\n\nfunction App() {\n\n  const [longUrl, setLongUrl] = useState(\"\");\n  const [shortUrl, setShortUrl] = useState(\"\");\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyShortUrl = shortUrl;\n\n  const apiUrl = \"https://genshort.herokuapp.com/api/url/shorten\"; \n\n  // const apiUrl = \"http://localhost:5000/api/url/shorten\"; \n\n\n  function onCopyText(){\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false);\n    }, 800);\n  };\n\n  function createShortUrl(){\n\n    axios.post( apiUrl, \n    {\n      userInput: longUrl\n    })\n    .then(function (response) {\n      //console.log(response.data);\n      // console.log(\"axios POST request worked successfully\");\n      setShortUrl(response.data);\n    })\n    .catch(function (error) {\n      console.log(\"Error in axios POST\\n\" + error);\n    });\n\n  };\n\n\n  return (\n    <div className=\"App\"> \n\n      <div className=\"userInput\">\n        <input type=\"url\" name=\"longUrl\" id=\"longUrl\" placeholder=\"Enter the url here...\" required  \n        onChange={(event) => {\n          setLongUrl(event.target.value);\n        }}/>\n        <button type=\"submit\" onClick={ createShortUrl }>Create short URL</button>\n      </div>\n\n      {/* the short Url section */}\n      <div className=\"output-container\">\n        <textarea className=\"shortUrl\" readOnly={true} value={shortUrl}/>\n\n        <CopyToClipboard text={shortUrl} onCopy={onCopyText}>\n          <div className=\"copy-area\">\n\n            {/* <button>Copy to Clipboard</button> */}\n            <div className=\"copyClipboard\">\n            <IconContext.Provider value={{ color: 'white', size: '20px' }}>\n            < BiClipboard />\n            </IconContext.Provider>\n\n            <span className=\"copy-feedback\"> \n            {isCopied ? \"âœ“\" : \"\"}  \n            </span>\n            </div>\n            \n          </div>\n        </CopyToClipboard>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}